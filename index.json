[{"content":"调用IPOPT约束的非线性解算器。 基本的函数调用  [x, info] = IPOPT(x0,funcs,options)\n 第一个输入是一个矩阵或矩阵的单元数组。它声明求解器的起点。\n回调函数 第二个输入必须是包含各种MATLAB例程函数句柄的结构。有关MATLAB中使用函数和函数句柄的更多信息，请在MATLAB提示符中输入HELP function和HELP FUNCTION_HANDLE。\n function f = objective (x) (必须)\n计算当前点的目标函数。例如，Hock \u0026amp; Schittkowski (H\u0026amp;S)测试问题#71(包含4个优化变量)的目标函数的定义将是\n1 2  functionf =objective (x)f = x(1)*x(4)*sum(x(1:3)) + x(3);     funcs.gradient (required) （必须）\n计算目标在当前点的梯度。它接受一个输入，当前迭代x。对于H\u0026amp;S测试问题#71，梯度回调函数的定义是\n1 2 3 4 5  functiong =gradient (x)g = [ x(1)*x(4) + x(4)*sum(x(1:3)) x(1)*x(4) x(1)*x(4) + 1 x(1)*sum(x(1:3)) ];     funcs.constraints (可选)\n只有当变量有约束时才需要此函数。它在当前点计算约束函数。它接受一个输入x。返回值是一个长度等于约束数量的向量(它必须与options.cl和options.cu的长度相同)。对于H\u0026amp;S测试问题#71，回调函数定义为\n1 2  functionc =constraints (x)c = [ prod(x); sum(x.^2) ];     funcs.jacobian(可选)\n只有当变量有约束时才需要此函数。求出约束在当前点处的雅可比矩阵。它有一个输入x，输出必须总是一个M × N的稀疏矩阵，其中M是约束的数量，N是变量的数量。在MATLAB中构造稀疏矩阵的更多信息，请输入HELP SPARSE。H\u0026amp;S测试问题#71的回调函数的定义是\n1 2  functionJ =jacobian (x)sparse([ prod(x)./x; 2*x ]);   请注意，返回值是一个稀疏矩阵\n  funcs.jacobianstructure(可选)\n只有当变量有约束时才需要此函数。它不需要任何输入。返回值是一个稀疏矩阵，其中一个条目是非零的当且仅当约束的雅可比矩阵在任意点是非零。H\u0026amp;S测试问题#71的回调函数简单地以稀疏矩阵格式返回一个2 x 4的全1矩阵:\n1 2  functionJ =jacobianstructure()J = sparse(ones(2,4));     funcs.hessian(可选)\n计算拉格朗日量在当前点的Hessian矩阵。它必须指定，除非您选择使用有限内存的准牛顿近似的Hessian函数(见下文)。回调函数有三个输入:当前点(x)，目标上的尺度因子(sigma)，以及拉格朗日乘数(lambda)，长度等于约束数量的向量。函数应该计算\n1  sigma*H + lambda(1)*G1 + ... + lambda(M)*GM   其中M为约束数，H为目标的Hessian矩阵，G为约束函数的Hessian矩阵。输出必须总是一个N x N的稀疏下三角矩阵，其中N是变量的数量。也就是说，如果X是输出值，那么X必须与TRIL(X)相同。下面是H\u0026amp;S测试问题#71的Hessian回调例程的实现:\n1 2 3 4 5 6 7 8 9 10  functionH =hessian (x, sigma, lambda)H = sigma*[ 2*x(4) 0 0 0; x(4) 0 0 0; x(4) 0 0 0; 2*x(1)+x(2)+x(3) x(1) x(1) 0 ]; H = H + lambda(1)*[ 0 0 0 0; x(3)*x(4) 0 0 0; x(2)*x(4) x(1)*x(4) 0 0; x(2)*x(3) x(1)*x(3) x(1)*x(2) 0 ]; H = sparse(H + lambda(2)*diag([2 2 2 2]));     funcs.hessianstructure(可选)\n此函数的作用与funcs.jacobianstructure相同，但对于Hessian矩阵。同样，如果您使用有限内存的准牛顿近似Hessian函数，则不需要此函数。它不需要任何输入，并且必须返回一个稀疏的下三角矩阵。对于H\u0026amp;S测试问题#71,MATLAB回调程序是相当直接的:\n1 2  functionH =hessianstructure()H = sparse(tril(ones(4)));     funcs.iterfunc(可选)\n每个算法迭代调用一次的附加回调函数。它有三个输入:第一个是算法的当前迭代，第二个是目标函数的当前值，第三个是包含字段x、inf_pr、inf_du、mu、d_norm、regularization_size、alpha_du、alpha_pr和ls_trials的结构体。这个函数应该总是返回true，除非您希望IPOPT因为任何原因而提前终止。如果您想将第三个输入与auxdata功能一起用于iterfunc，您将需要修改ipopt_auxdata.m的适当部分。\n 选项 选项通过第三个输入传递。下面是您可以选择指定的字段的描述。\n options.lb\n指定变量的下界。它必须和x0有相同的元素数。将一个条目设置为-Inf，表示不指定下界。\n  options.ub\n指定变量的上界。它必须和x0有相同的元素数。将一个条目设置为Inf，表示不指定上限。\n  options.cl, options.cu\n设置约束的下界和上界。每个向量的长度应该等于约束的数量。与前面一样，通过将条目设置为-Inf或+Inf来删除绑定。等式约束通过设置cl(i) = cu(i)来实现。\n  options.auxdata\n可以选择通过函数调用向上面列出的MATLAB回调例程传递额外的辅助数据。例如，objective回调函数现在接受两个输入，x和auxdata。在IPOPT优化过程中，辅助数据可能不会发生变化。辅助数据保持与它们在初始调用中拥有的相同值。如果需要随时间变化的变量，可能需要考虑全局变量(HELP global类型).查看example子目录中的lasso.m，演示了如何将辅助数据传递给各种回调函数。从Ipopt 3.11版本开始，必须调用ipopt_auxdata(x0,funcs,options)来使用auxdata功能。\n  options.zl, options.zu, options.lambda\n这些字段指定拉格朗日乘数的初始值，这对于“热启动”内部点解算器特别有用。它们分别指定对应于变量下界、变量上界和约束的拉格朗日乘数。\n  options.ipopt\n最后，您还可以通过这个字段更改IPOPT的设置。例如，要关闭IPOPT输出，使用内存有限的BFGS近似于Hessian，并打开导数检查器，执行以下操作:\n1 2 3  options.ipopt.print_level = 0; options.ipopt.hessian_approximation = \u0026#39;limited-memory\u0026#39;; options.ipopt.derivative_test = \u0026#39;first-order\u0026#39;;   要了解更多详细信息，请参见IPOPT网站上的文档。\n 输出 如果解算器成功地收敛到一个固定点或终止时没有出现不可恢复的错误，函数IPOPT输出候选解x。在所有其他情况下，都会抛出一个错误。它还输出一些额外的信息:\n info.zl, info.zu, info.lambda\n解处拉格朗日乘数的值。有关拉格朗日乘数的更多信息，请参阅“选项”。\n  info.status\n终止时，该字段将采用以下值之一(有关更最新的列表，请参阅IPOPT c++源目录中的ipreturncode .h头文件):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  0解决 1已解决到可接受级别 2检测到不可行的问题 3搜索方向太小 4发散迭代 5用户请求停止 -1超过最大迭代次数 -2恢复阶段失败 -3步骤计算中错误 -10自由度不足 -11无效的问题定义 -12无效的选项 -13检测到无效数字 -100不可恢复的异常 -101抛出非ipopt异常 -102内存不足 -199内部错误     info.iter, info.cpu\nIpopt运行所花费的迭代次数和CPU时间(以秒为单位)\n ","permalink":"https://dyedbamboo.github.io/posts/ipopt_use/","summary":"调用IPOPT约束的非线性解算器。 基本的函数调用  [x, info] = IPOPT(x0,funcs,options)\n 第一个输入是一个矩阵或矩阵的单元数组。它声明求解器的起点。\n回调函数 第二个输入必须是包含各种MATLAB例程函数句柄的结构。有关MATLAB中使用函数和函数句柄的更多信息，请在MATLAB提示符中输入HELP function和HELP FUNCTION_HANDLE。\n function f = objective (x) (必须)\n计算当前点的目标函数。例如，Hock \u0026amp; Schittkowski (H\u0026amp;S)测试问题#71(包含4个优化变量)的目标函数的定义将是\n1 2  functionf =objective (x)f = x(1)*x(4)*sum(x(1:3)) + x(3);     funcs.gradient (required) （必须）\n计算目标在当前点的梯度。它接受一个输入，当前迭代x。对于H\u0026amp;S测试问题#71，梯度回调函数的定义是\n1 2 3 4 5  functiong =gradient (x)g = [ x(1)*x(4) + x(4)*sum(x(1:3)) x(1)*x(4) x(1)*x(4) + 1 x(1)*sum(x(1:3)) ];     funcs.constraints (可选)\n只有当变量有约束时才需要此函数。它在当前点计算约束函数。它接受一个输入x。返回值是一个长度等于约束数量的向量(它必须与options.cl和options.cu的长度相同)。对于H\u0026amp;S测试问题#71，回调函数定义为\n1 2  functionc =constraints (x)c = [ prod(x); sum(x.","title":"IPOPT非线性解算器MATLAB使用"},{"content":"Typora 常用快捷键   文件操作  Ctrl + N ：新建文件 Ctrl + shift + N ：新建窗口 Ctrl + O ：打开 Ctrl + P ： 快速打开（快速打开之前编辑过的历史文件） Ctrl + S ：保存 Ctrl + shift + S：另存为 Typora 偏好设置：Ctrl + ; Ctrl + W ：关闭    编辑操作  Ctrl + Z : 撤销 Ctrl + Y ：重做 Ctrl + X : 剪切 Ctrl + C : 复制 Ctrl + V：粘贴 Ctrl + shift +C ：复制为MarkDown格式 Ctrl + shift + V：粘贴为纯文本格式（去除文本原本格式，很好用） Ctrl +A：全选 Ctrl + L：选中当前行 Ctrl + E：选中当前格式文本 Ctrl + D：选中当前词 Ctrl + Home：跳转到开头 Ctrl + End：跳转到末尾 Ctrl + J：跳转到所选内容 Ctrl +shift+D：删除当前词    查找和替换  Ctrl + F：查找 F3：查找下一个 shift + F3：查找上一个 Ctrl + H：替换    MarkDown语法快捷键  Ctrl + 数字键1~6：对应一到六级标题 Ctrl +数字键0：段落 Ctrl + =：提升标题等级 Ctrl + -：降低标题等级 Ctrl + T ：插入表格 Ctrl +shift+K：插入代码块 Ctrl +shift+M：插入公式 Ctrl +shift+I：插入图片 Ctrl +shift+Q：引用 Ctrl +shift+[：有序列表 Ctrl +shift+]：无序列表 Ctrl + [：列表减少缩进 Ctrl +]：列表增加缩进    格式  Ctrl +B：加粗 Ctrl + I：斜体 Ctrl + U：下划线 Alt + shift + 5 : 删除线 Ctrl + K ：超链接 Ctrl + \\：清除样式    视图  Ctrl +shift+L：显示/隐藏侧边栏 Ctrl +shift+1：大纲 Ctrl +shift+2：文档列表 Ctrl +shift+3：文件树 Ctrl +shift+F：搜索 Ctrl +/：源代码模式 F11：全屏 Ctrl +shift+9：实际大小 Ctrl +shift+ -：缩小 Ctrl +shift+ =：放大 Ctrl + Tab：应用内部切换窗口 shift+F12：开发者工具    ","permalink":"https://dyedbamboo.github.io/posts/typora/","summary":"Typora 常用快捷键   文件操作  Ctrl + N ：新建文件 Ctrl + shift + N ：新建窗口 Ctrl + O ：打开 Ctrl + P ： 快速打开（快速打开之前编辑过的历史文件） Ctrl + S ：保存 Ctrl + shift + S：另存为 Typora 偏好设置：Ctrl + ; Ctrl + W ：关闭    编辑操作  Ctrl + Z : 撤销 Ctrl + Y ：重做 Ctrl + X : 剪切 Ctrl + C : 复制 Ctrl + V：粘贴 Ctrl + shift +C ：复制为MarkDown格式 Ctrl + shift + V：粘贴为纯文本格式（去除文本原本格式，很好用） Ctrl +A：全选 Ctrl + L：选中当前行 Ctrl + E：选中当前格式文本 Ctrl + D：选中当前词 Ctrl + Home：跳转到开头 Ctrl + End：跳转到末尾 Ctrl + J：跳转到所选内容 Ctrl +shift+D：删除当前词    查找和替换  Ctrl + F：查找 F3：查找下一个 shift + F3：查找上一个 Ctrl + H：替换    MarkDown语法快捷键  Ctrl + 数字键1~6：对应一到六级标题 Ctrl +数字键0：段落 Ctrl + =：提升标题等级 Ctrl + -：降低标题等级 Ctrl + T ：插入表格 Ctrl +shift+K：插入代码块 Ctrl +shift+M：插入公式 Ctrl +shift+I：插入图片 Ctrl +shift+Q：引用 Ctrl +shift+[：有序列表 Ctrl +shift+]：无序列表 Ctrl + [：列表减少缩进 Ctrl +]：列表增加缩进    格式  Ctrl +B：加粗 Ctrl + I：斜体 Ctrl + U：下划线 Alt + shift + 5 : 删除线 Ctrl + K ：超链接 Ctrl + \\：清除样式    视图  Ctrl +shift+L：显示/隐藏侧边栏 Ctrl +shift+1：大纲 Ctrl +shift+2：文档列表 Ctrl +shift+3：文件树 Ctrl +shift+F：搜索 Ctrl +/：源代码模式 F11：全屏 Ctrl +shift+9：实际大小 Ctrl +shift+ -：缩小 Ctrl +shift+ =：放大 Ctrl + Tab：应用内部切换窗口 shift+F12：开发者工具    ","title":"Typora快捷键"},{"content":"可见光与红外图像融合 写了一个批量计算图像融合指标的脚本，主要用到了scikit-image模块，点击可查看官方文档\n安装scikit-image 建议建立一个虚拟Python环境运行，虚拟环境的意义，就如同虚拟机一样，它可以实现不同环境中Python依赖包相互独立，互不干扰。\n创建虚拟环境的步骤：\n  第一步：安装Virtualenv\n1  pip3 install virtualenv -i https://pypi.python.org/simple/     第二步：cd 到存放虚拟环境的目录地址，执行以下代码创建虚拟环境\n1 2 3 4  virtualenv python3_env # 你也可以指定版本 virtualenv -p /usr/bin/python2.7 python2_env virtualenv -p /usr/bin/python3.8 python3_env     第三步：激活虚拟环境\nubuntu执行以下命令：\n1  source python3_env/bin/activate   Windows执行以下命令：\n1  .\\Scripts\\activate.bat     第四步：退出虚拟环境\nubuntu执行：\n1  deactivate   Windows执行：\n1  .\\Scripts\\deactivate.bat     接下来进入正文，安装scikit-image，激活虚拟环境后，pip安装\n1 2 3 4  # 更新pip python -m pip install -U pip # 安装 scikit-image python -m pip install -U scikit-image   批量计算图像融合指标SSIM、RMSE、PSNR、EN、AG 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113  import cv2 import math import os import numpy as np import matplotlib.pyplot as plt from skimage.metrics import mean_squared_error as compare_mse from skimage.metrics import peak_signal_noise_ratio as compare_psnr from skimage.metrics import structural_similarity as compare_ssim from skimage.measure import shannon_entropy as compare_entropy def compare_img(img_raw_path, img_fusion_path): ssim_list = [] rmse_list = [] psnr_list = [] en_list = [] ag_list = [] for filename_raw ,filename_fusion in zip(os.listdir(img_raw_path),os.listdir(img_fusion_path)): img_raw = cv2.imread(img_raw_path+\u0026#39;/\u0026#39;+filename_raw) img_fusion = cv2.imread(img_fusion_path+\u0026#39;/\u0026#39;+filename_fusion) ssim = compare_ssim(img_raw, img_fusion, channel_axis=2) # 对于多通道图像(RGB、HSV等)关键词multichannel要设置为True rmse = math.sqrt(compare_mse(img_raw, img_fusion)) psnr = compare_psnr(img_raw, img_fusion) en = compare_entropy(img_fusion) ag = compare_ag(img_fusion) ssim_list.append(ssim) rmse_list.append(rmse) psnr_list.append(psnr) en_list.append(en) ag_list.append(ag) return ssim_list, rmse_list, psnr_list,en_list,ag_list def compare_ag(image): image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) image = np.array(image) image = image.astype(np.float32) width = image.shape[1] width = width - 1 height = image.shape[0] height = height - 1 tmp = 0 for i in range(1,height): for j in range(1,width): dx = image[i][j + 1] - image[i][j] dy = image[i + 1][j] - image[i][j] ds = math.sqrt((dx * dx + dy * dy) / 2) tmp += ds return tmp / (height * width) def cal_mean_metric(list1,list2): average_metric = [list1,list2] average_metric = list(np.mean(average_metric, axis=0)) return average_metric def plot_metric(list1,list2,name): plt.figure() img_nums = len(list1) x_axis_data = range(1, img_nums+1) plt.plot(x_axis_data, list1, \u0026#39;b*--\u0026#39;,label=\u0026#34;Original method \u0026#34;+name ,linewidth=1) plt.plot(x_axis_data, list2, \u0026#39;r.--\u0026#39;,label=\u0026#34;Improved method \u0026#34;+name,linewidth=1) plt.legend() plt.xticks(x_axis_data) plt.xlabel(\u0026#34;Image pair\u0026#34;, fontsize=13, fontweight=\u0026#39;bold\u0026#39;) plt.ylabel(\u0026#34;Metrics Value\u0026#34;, fontsize=13, fontweight=\u0026#39;bold\u0026#39;) if __name__ == \u0026#34;__main__\u0026#34;: img_rgb_path = \u0026#39;./img/rgb\u0026#39; img_red_path = \u0026#39;./img/red\u0026#39; img_fusion_path = \u0026#39;./img/img_fusion/\u0026#39; img_improve_path = \u0026#39;./img/img_improve_fusion\u0026#39; rgb_ssim_list,rgb_rmse_list,rgb_psnr_list,rgb_en_list,rgb_ag_list = compare_img(img_rgb_path, img_fusion_path) red_ssim_list,red_rmse_list,red_psnr_list,red_en_list,red_ag_list = compare_img(img_red_path, img_fusion_path) average_ssim = cal_mean_metric(rgb_ssim_list,red_ssim_list) average_rmse = cal_mean_metric(rgb_rmse_list,red_rmse_list) average_psnr = cal_mean_metric(rgb_psnr_list,red_psnr_list) # for i in range(len(average_ssim)): # print(\u0026#34;改进前:Average SSIM: %.4f\u0026#34; %average_ssim[i], # \u0026#34;Average RMSE: %.4f\u0026#34; %average_rmse[i], # \u0026#34;Average PSNR: %.4f\u0026#34; %average_psnr[i], # \u0026#34;EN: %.4f\u0026#34; %rgb_en_list[i], # \u0026#34;AG: %.4f\u0026#34; %rgb_ag_list[i]) print(\u0026#34;改进前:Average SSIM: %.4f\u0026#34; %np.mean(rgb_ssim_list), \u0026#34;Average RMSE: %.4f\u0026#34; %np.mean(rgb_rmse_list), \u0026#34;Average PSNR: %.4f\u0026#34; %np.mean(rgb_psnr_list), \u0026#34;EN: %.4f\u0026#34; %np.mean(rgb_en_list), \u0026#34;AG: %.4f\u0026#34; %np.mean(rgb_ag_list)) rgb_ssim_list1,rgb_rmse_list1,rgb_psnr_list1,rgb_en_list1,rgb_ag_list1 = compare_img(img_rgb_path, img_improve_path) red_ssim_list1,red_rmse_list1,red_psnr_list1,red_en_list1,red_ag_list1 = compare_img(img_red_path, img_improve_path) average_ssim1 = cal_mean_metric(rgb_ssim_list1,red_ssim_list1) average_rmse1 = cal_mean_metric(rgb_rmse_list1,red_rmse_list1) average_psnr1 = cal_mean_metric(rgb_psnr_list1,red_psnr_list1) # for i in range(len(average_ssim1)): # print(\u0026#34;改进后:Average SSIM: %.4f\u0026#34; %average_ssim1[i], # \u0026#34;Average RMSE: %.4f\u0026#34; %average_rmse1[i], # \u0026#34;Average PSNR: %.4f\u0026#34; %average_psnr1[i], # \u0026#34;EN: %.4f\u0026#34; %rgb_en_list1[i], # \u0026#34;AG: %.4f\u0026#34; %rgb_ag_list1[i]) print(\u0026#34;改进后:Average SSIM: %.4f\u0026#34; %np.mean(rgb_ssim_list1), \u0026#34;Average RMSE: %.4f\u0026#34; %np.mean(rgb_rmse_list1), \u0026#34;Average PSNR: %.4f\u0026#34; %np.mean(rgb_psnr_list1), \u0026#34;EN: %.4f\u0026#34; %np.mean(rgb_en_list1), \u0026#34;AG: %.4f\u0026#34; %np.mean(rgb_ag_list1)) plot_metric(average_ssim,average_ssim1,\u0026#34;SSIM\u0026#34;) plot_metric(average_rmse,average_rmse1,\u0026#34;RMSE\u0026#34;) plot_metric(average_psnr,average_psnr1,\u0026#34;PSNR\u0026#34;) plot_metric(rgb_en_list,rgb_en_list1,\u0026#34;EN\u0026#34;) plot_metric(rgb_ag_list,rgb_ag_list1,\u0026#34;AG\u0026#34;) plt.show()   运行结果如下\n\r\r\r\r\r\r\r\r\r\r\r\r","permalink":"https://dyedbamboo.github.io/posts/study/img_fus/","summary":"可见光与红外图像融合 写了一个批量计算图像融合指标的脚本，主要用到了scikit-image模块，点击可查看官方文档\n安装scikit-image 建议建立一个虚拟Python环境运行，虚拟环境的意义，就如同虚拟机一样，它可以实现不同环境中Python依赖包相互独立，互不干扰。\n创建虚拟环境的步骤：\n  第一步：安装Virtualenv\n1  pip3 install virtualenv -i https://pypi.python.org/simple/     第二步：cd 到存放虚拟环境的目录地址，执行以下代码创建虚拟环境\n1 2 3 4  virtualenv python3_env # 你也可以指定版本 virtualenv -p /usr/bin/python2.7 python2_env virtualenv -p /usr/bin/python3.8 python3_env     第三步：激活虚拟环境\nubuntu执行以下命令：\n1  source python3_env/bin/activate   Windows执行以下命令：\n1  .\\Scripts\\activate.bat     第四步：退出虚拟环境\nubuntu执行：\n1  deactivate   Windows执行：\n1  .\\Scripts\\deactivate.bat     接下来进入正文，安装scikit-image，激活虚拟环境后，pip安装","title":"可见光与红外图像融合指标批量计算"},{"content":"  初始化一个站点\n1  hugo new site /path/site-name/     创建一篇新的博客\n1  hugo new post/new_blog.md     编译生成静态文件到public目录\n1  hugo     编译生成静态文件并启动web服务，默认1313端口\n1  hugo server     常用参数介绍\n1 2 3 4 5 6 7 8 9 10 11  --bind=\u0026#34;127.0.0.1\u0026#34; 服务监听IP地址 -p, --port=1313 服务监听端口 -w, --watch[=true] 监听站点目录，发现文件变更自动编译 -D, --buildDrafts 包括被标记为draft的文章 -E, --buildExpired 包括已过期的文章 -F, --buildFuture 包括将在未来发布的文章 -b, --baseURL=\u0026#34;playxy.cn\u0026#34; 服务监听域名 --log[=false]: 开启日志 --logFile=\u0026#34;/var/log/hugo.log\u0026#34; log输出路径 -t, --theme=\u0026#34;\u0026#34; 指定主题 -v, --verbose[=false] 输出详细信息     git远程推送\n1 2 3 4 5 6 7  cd public git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:DyedBamboo/DyedBamboo.github.io.git git push -u origin main     1 2    ","permalink":"https://dyedbamboo.github.io/posts/hugo/hugo/","summary":"初始化一个站点\n1  hugo new site /path/site-name/     创建一篇新的博客\n1  hugo new post/new_blog.md     编译生成静态文件到public目录\n1  hugo     编译生成静态文件并启动web服务，默认1313端口\n1  hugo server     常用参数介绍\n1 2 3 4 5 6 7 8 9 10 11  --bind=\u0026#34;127.0.0.1\u0026#34; 服务监听IP地址 -p, --port=1313 服务监听端口 -w, --watch[=true] 监听站点目录，发现文件变更自动编译 -D, --buildDrafts 包括被标记为draft的文章 -E, --buildExpired 包括已过期的文章 -F, --buildFuture 包括将在未来发布的文章 -b, --baseURL=\u0026#34;playxy.","title":"Hugo常用命令"},{"content":"Markdown For Typora Overview Markdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown.\n[toc]\nBlock Elements Paragraph and line breaks A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph.\nPress Shift + Return to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert \u0026lt;br/\u0026gt;.\nHeaders Headers use 1-6 hash (#) characters at the start of the line, corresponding to header levels 1-6. For example:\n1 2 3 4 5  # This is an H1  ## This is an H2  ###### This is an H6   In Typora, input ‘#’s followed by title content, and press Return key will create a header.\nBlockquotes Markdown uses email-style \u0026gt; characters for block quoting. They are presented as:\n1 2 3 4 5 6 7  \u0026gt; This is a blockquote with two paragraphs. This is first paragraph. \u0026gt; \u0026gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. \u0026gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.   In Typora, inputting ‘\u0026gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘\u0026gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘\u0026gt;’.\nLists Input * list item 1 will create an unordered list - the * symbol can be replace with + or -.\nInput 1. list item 1 will create an ordered list - their markdown source code is as follows:\n1 2 3 4 5 6 7 8 9  ## un-ordered list * Red * Green * Blue ## ordered list 1. Red 2. Green 3.\tBlue   Task List Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:\n1 2 3 4 5  - [ ] a task list item - [ ] list syntax required - [ ] normal **formatting**, @mentions, #1234 refs - [ ] incomplete - [x] completed   You can change the complete/incomplete state by clicking on the checkbox before the item.\n(Fenced) Code Blocks Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.\nUsing fences is easy: Input ``` and press return. Add an optional language identifier after ``` and we\u0026rsquo;ll run it through syntax highlighting:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  Here\u0026#39;s an example: ​``` function test() { console.log(\u0026#34;notice the blank line before this function?\u0026#34;); } ​``` syntax highlighting: ​```ruby require \u0026#39;redcarpet\u0026#39; markdown = Redcarpet.new(\u0026#34;Hello World!\u0026#34;) puts markdown.to_html ​```   Math Blocks You can render LaTeX mathematical expressions using MathJax.\nTo add a mathematical expression, input $$ and press the \u0026lsquo;Return\u0026rsquo; key. This will trigger an input field which accepts Tex/LaTex source. For example:\n$$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026amp; \\mathbf{j} \u0026amp; \\mathbf{k} \\ \\frac{\\partial X}{\\partial u} \u0026amp; \\frac{\\partial Y}{\\partial u} \u0026amp; 0 \\ \\frac{\\partial X}{\\partial v} \u0026amp; \\frac{\\partial Y}{\\partial v} \u0026amp; 0 \\ \\end{vmatrix} $$\nIn the markdown source file, the math block is a LaTeX expression wrapped by a pair of ‘$$’ marks:\n1 2 3 4 5 6 7  $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026amp; \\mathbf{j} \u0026amp; \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} \u0026amp; \\frac{\\partial Y}{\\partial u} \u0026amp; 0 \\\\ \\frac{\\partial X}{\\partial v} \u0026amp; \\frac{\\partial Y}{\\partial v} \u0026amp; 0 \\\\ \\end{vmatrix} $$   You can find more details here.\nTables Input | First Header | Second Header | and press the return key. This will create a table with two columns.\nAfter a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.\nThe full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.\nIn markdown source code, they look like:\n1 2 3 4  | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell |   You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.\nFinally, by including colons (:) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:\n1 2 3 4 5  | Left-Aligned | Center Aligned | Right Aligned | | :------------ |:---------------:| -----:| | col 3 is | some wordy text | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 |   A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.\nFootnotes 1 2 3  You can create footnotes like this[^footnote]. [^footnote]: Here is the *text* of the **footnote**.   will produce:\nYou can create footnotes like this1.\nHover over the ‘footnote’ superscript to see content of the footnote.\nHorizontal Rules Inputting *** or --- on a blank line and pressing return will draw a horizontal line.\n YAML Front Matter Typora now supports YAML Front Matter. Input --- at the top of the article and then press Return to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.\nTable of Contents (TOC) Input [toc] and press the Return key. This will create a “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.\nSpan Elements Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.\nLinks Markdown supports two styles of links: inline and reference.\nIn both styles, the link text is delimited by [square brackets].\nTo create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:\n1 2 3  This is [an example](http://example.com/ \u0026#34;Title\u0026#34;) inline link. [This link](http://example.net/) has no title attribute.   will produce:\nThis is an example inline link. (\u0026lt;p\u0026gt;This is \u0026lt;a href=\u0026quot;http://example.com/\u0026quot; title=\u0026quot;Title\u0026quot;\u0026gt;)\nThis link has no title attribute. (\u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;http://example.net/\u0026quot;\u0026gt;This link\u0026lt;/a\u0026gt; has no)\nInternal Links You can set the href to headers, which will create a bookmark that allow you to jump to that section after clicking. For example:\nCommand(on Windows: Ctrl) + Click This link will jump to header Block Elements. To see how to write that, please move cursor or click that link with ⌘ key pressed to expand the element into markdown source.\nReference Links Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:\n1 2 3 4 5  This is [an example][id] reference-style link. Then, anywhere in the document, you define your link label on a line by itself like this: [id]: http://example.com/ \u0026#34;Optional Title Here\u0026#34;   In Typora, they will be rendered like so:\nThis is an example reference-style link.\nThe implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:\n1 2 3 4  [Google][] And then define the link: [Google]: http://google.com/   In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.\nURLs Typora allows you to insert URLs as links, wrapped by \u0026lt;brackets\u0026gt;.\n\u0026lt;i@typora.io\u0026gt; becomes i@typora.io.\nTypora will also automatically link standard URLs. e.g: www.google.com.\nImages Images have similar syntax as links, but they require an additional ! char before the start of the link. The syntax for inserting an image looks like this:\n1 2 3  ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg \u0026#34;Optional title\u0026#34;)   You are able to use drag \u0026amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag \u0026amp; drop is in same directory or sub-directory as the document you\u0026rsquo;re currently editing.\nIf you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property typora-root-url in YAML Front Matters. For example, input typora-root-url:/User/Abner/Website/typora.io/ in YAML Front Matters, and then ![alt](/blog/img/test.png) will be treated as ![alt](file:///User/Abner/Website/typora.io/blog/img/test.png) in Typora.\nYou can find more details here.\nEmphasis Markdown treats asterisks (*) and underscores (_) as indicators of emphasis. Text wrapped with one * or _ will be wrapped with an HTML \u0026lt;em\u0026gt; tag. E.g:\n1 2 3  *single asterisks* _single underscores_   output:\nsingle asterisks\nsingle underscores\nGFM will ignore underscores in words, which is commonly used in code and names, like this:\n wow_great_stuff\ndo_this_and_do_that_and_another_thing.\n To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n1  \\*this text is surrounded by literal asterisks\\*   Typora recommends using the * symbol.\nStrong A double * or _ will cause its enclosed contents to be wrapped with an HTML \u0026lt;strong\u0026gt; tag, e.g:\n1 2 3  **double asterisks** __double underscores__   output:\ndouble asterisks\ndouble underscores\nTypora recommends using the ** symbol.\nCode To indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\n1  Use the `printf()` function.   will produce:\nUse the printf() function.\nStrikethrough GFM adds syntax to create strikethrough text, which is missing from standard Markdown.\n~~Mistaken text.~~ becomes Mistaken text.\nUnderlines Underline is powered by raw HTML.\n\u0026lt;u\u0026gt;Underline\u0026lt;/u\u0026gt; becomes Underline.\nEmoji 😄 Input emoji with syntax 😄.\nUser can trigger auto-complete suggestions for emoji by pressing ESC key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to Edit -\u0026gt; Emoji \u0026amp; Symbols in the menu bar (macOS).\nInline Math To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use $ to wrap a TeX command. For example: $\\lim_{x \\to \\infty} \\exp(-x) = 0$ will be rendered as LaTeX command.\nTo trigger inline preview for inline math: input “$”, then press the ESC key, then input a TeX command.\nYou can find more details here.\nSubscript To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use ~ to wrap subscript content. For example: H~2~O, X~long\\ text~/\nSuperscript To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use ^ to wrap superscript content. For example: X^2^.\nHighlight To use this feature, please enable it first in the Preference Panel -\u0026gt; Markdown Tab. Then, use == to wrap highlight content. For example: ==highlight==.\nHTML You can use HTML to style content what pure Markdown does not support. For example, use \u0026lt;span style=\u0026quot;color:red\u0026quot;\u0026gt;this text is red\u0026lt;/span\u0026gt; to add text with red color.\nEmbed Contents Some websites provide iframe-based embed code which you can also paste into Typora. For example:\n1  \u0026lt;iframe height=\u0026#39;265\u0026#39; scrolling=\u0026#39;no\u0026#39; title=\u0026#39;Fancy Animated SVG Menu\u0026#39; src=\u0026#39;http://codepen.io/jeangontijo/embed/OxVywj/?height=265\u0026amp;theme-id=0\u0026amp;default-tab=css,result\u0026amp;embed-version=2\u0026#39; frameborder=\u0026#39;no\u0026#39; allowtransparency=\u0026#39;true\u0026#39; allowfullscreen=\u0026#39;true\u0026#39; style=\u0026#39;width: 100%;\u0026#39;\u0026gt;\u0026lt;/iframe\u0026gt;   Video You can use the \u0026lt;video\u0026gt; HTML tag to embed videos. For example:\n1  \u0026lt;video src=\u0026#34;xxx.mp4\u0026#34; /\u0026gt;   Other HTML Support You can find more details here.\n  Here is the text of the footnote.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://dyedbamboo.github.io/posts/markdown/markdown/","summary":"Markdown For Typora Overview Markdown is created by Daring Fireball; the original guideline is here. Its syntax, however, varies between different parsers or editors. Typora is using GitHub Flavored Markdown.\n[toc]\nBlock Elements Paragraph and line breaks A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press Return once) to create a new paragraph.","title":"Markdown"},{"content":"我的第一篇博客 随便写点东西\n静夜思\n1 2 3 4 5 6 7  #include \u0026lt;iostream\u0026gt; using namespace std; int main(void){ cout \u0026lt;\u0026lt; \u0026#34;hello world\u0026#34;\u0026lt;\u0026lt;endl; }   ","permalink":"https://dyedbamboo.github.io/posts/blog/","summary":"我的第一篇博客 随便写点东西\n静夜思\n1 2 3 4 5 6 7  #include \u0026lt;iostream\u0026gt; using namespace std; int main(void){ cout \u0026lt;\u0026lt; \u0026#34;hello world\u0026#34;\u0026lt;\u0026lt;endl; }   ","title":"Blog"},{"content":"","permalink":"https://dyedbamboo.github.io/400/","summary":"400","title":"400"},{"content":"","permalink":"https://dyedbamboo.github.io/50x/","summary":"50x","title":"50x"}]